{"version":3,"sources":["src/hooks/useEthereum.tsx","src/context/EthersContext.tsx","src/context/GlobalContext.tsx","src/context/index.tsx","src/constants/dimension.ts","src/constants/colors.ts","src/hooks/useColors.tsx","src/components/DarkModeSwitch.tsx","src/components/FlexView.tsx","src/components/Text.tsx","src/components/web/WebHeader.tsx","src/components/Container.tsx","src/components/Content.tsx","src/components/Title.tsx","src/components/Button.tsx","src/components/web/ConnectToWallet.tsx","src/screens/Screen.tsx","src/screens/EmptyScreen.tsx","src/constants/contracts.ts","src/hooks/useBlog.tsx","src/screens/NewScreen.tsx","src/components/Loading.tsx","src/screens/ViewScreen.tsx","src/screens/index.tsx","App.tsx","globals.js","assets/metamask-dark.png","assets/metamask.png"],"names":["useEthereum","window","ethereum","EthersContext","React","createContext","provider","undefined","signer","chainId","address","ensName","EthersContextProvider","children","useState","setChainId","useMemo","ethers","providers","AlchemyProvider","setSigner","setAddress","setENSName","useAsyncEffect","a","async","web3","Web3Provider","getSigner","useEffect","onAccountsChanged","request","method","accounts","onChainChanged","Number","on","off","lookupAddress","ens","Provider","value","Consumer","GlobalContext","load","clear","darkMode","setDarkMode","_darkMode","title","setTitle","_text","body","setBody","GlobalContextProvider","colorScheme","useColorScheme","AsyncStorage","getItem","mode","removeItem","setItem","String","ContextProvider","SCREEN_WIDTH","Math","round","Dimensions","get","width","SCREEN_HEIGHT","height","IS_DESKTOP","Spacing","tiny","small","normal","large","huge","Colors","common","white","transparent","primary","secondary","green","red","twitter","facebook","light","accent","header","submenu","background","backgroundLight","border","borderDark","textDark","textMedium","textLight","disabled","shadow","placeholder","overlay","dark","useColors","useContext","DarkModeSwitch","props","onChange","useCallback","View","style","transform","scale","FlexView","flexDirection","direction","Text","fontFamily","fontWeight","color","medium","note","h1Style","h2Style","h3Style","h4Style","fontSize","caption","Title","alignSelf","alignItems","to","textDecoration","Menu","marginLeft","marginRight","marginBottom","MenuIcon","onExpand","type","name","size","onPress","WebHeader","position","top","zIndex","paddingBottom","backgroundColor","flex","justifyContent","paddingTop","paddingHorizontal","onExpandMenu","Container","Platform","select","web","ScrollView","contentContainerStyle","default","SafeAreaView","Content","paddingVertical","text","Button","loading","loadingProps","buttonStyle","titleStyle","disabledTitleStyle","borderColor","disabledStyle","ConnectWallet","metaMask","isMetaMask","source","require","Image","alert","containerStyle","marginTop","marginHorizontal","WebScreen","allowRead","right","bottom","left","textAlign","ConnectToWallet","EmptyScreen","Screen","getBlog","signerOrProvider","Contract","Blog","abi","useBlog","history","useHistory","creatingPost","setCreatingPost","createPost","blog","create","constants","HashZero","tx","wait","receipt","hash","events","args","push","fetchPost","getPost","TitleInput","onChangeText","autoFocus","inputStyle","OS","outline","inputContainerStyle","borderBottomWidth","BodyInput","multiline","lineHeight","textAlignVertical","minHeight","Controls","NewScreen","Loading","ActivityIndicator","marginVertical","Body","styles","heading1","heading2","heading3","heading4","heading5","heading6","onLinkPress","url","open","NotFound","ViewScreen","useParams","post","setPost","author","AddressZero","Screens","WebScreens","setMenuExpanded","fallback","path","App","useFonts","SourceCodePro_200ExtraLight","regular","SourceCodePro_400Regular","bold","SourceCodePro_700Bold","AppLoading","global","Buffer","module","exports"],"mappings":"mPAiDeA,EA/CK,WAChB,OAAOC,OAAOC,UCGLC,EAAgBC,IAAMC,cAAc,CAC7CC,cAAUC,EACVC,YAAQD,EACRE,QAAS,EACTC,QAAS,KACTC,QAAS,OAIAC,EAAwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9BX,EAAWF,IADkC,EAErBc,mBAAiB,GAFI,WAE5CL,EAF4C,KAEnCM,EAFmC,KAG7CT,EAAWU,mBAAQ,WACrB,OAAO,IAAIC,SAAOC,UAAUC,gBAAgB,QAAS,sCACtD,IALgD,EAMvBL,qBANuB,WAM5CN,EAN4C,KAMpCY,EANoC,OAOrBN,mBAAwB,MAPH,WAO5CJ,EAP4C,KAOnCW,EAPmC,OAQrBP,mBAAwB,MARH,WAQ5CH,EAR4C,KAQnCW,EARmC,KAkDnD,OAxCAC,KAAe,0BAAAC,EAAAC,OAAA,oDACPvB,EADO,uBAEDwB,EAAO,IAAIT,SAAOC,UAAUS,aAAazB,GAFxC,KAGPkB,EAHO,WAAAI,EAAA,MAGSE,EAAKE,aAHd,gGAKZ,CAAC1B,IAEJ2B,qBAAU,WACN,GAAI3B,EAAU,CACV,IAAM4B,EAAoB,0BAAAN,EAAAC,OAAA,oDAClBvB,EADkB,kCAAAsB,EAAA,MAEKtB,EAAS6B,QAAQ,CAAEC,OAAQ,kBAFhC,QAGlB,OADMC,EAFY,aAGlB,EAAIA,EAAW,KACXZ,EAAWY,EAAS,IAJN,6DAQpBC,EAAiB,WACfhC,GACAa,EAAWoB,OAAOjC,EAASO,WAOnC,OAJAqB,IACAI,IACAhC,EAASkC,GAAG,kBAAmBN,GAC/B5B,EAASkC,GAAG,eAAgBF,GACrB,WACK,MAARhC,KAAUmC,IAAI,kBAAmBP,GACzB,MAAR5B,KAAUmC,IAAI,eAAgBP,OAGvC,CAAC5B,IAEJqB,KAAe,0BAAAC,EAAAC,OAAA,oDACPjB,IAAUE,EADH,kCAAAc,EAAA,MAEWhB,EAAOF,SAASgC,cAAc5B,IAFzC,OAED6B,EAFC,OAGPjB,EAAWiB,GAHJ,8DAKZ,CAAC/B,EAAQE,IAGR,kBAACP,EAAcqC,SAAf,CACIC,MAAO,CACHnC,WACAE,SACAC,UACAC,UACAC,YAEHE,I,GAKwBV,EAAcuC,S,0BC1EtCC,EAAgBvC,IAAMC,cAAc,CAC7CuC,KAAM,oBAAApB,EAAAC,OAAA,sGACNoB,MAAO,oBAAArB,EAAAC,OAAA,sGACPqB,UAAU,EACVC,YAAa,SAAMC,GAAN,SAAAxB,EAAAC,OAAA,sGACbwB,MAAO,GACPC,SAAU,SAACC,KACXC,KAAM,GACNC,QAAS,SAACF,OAIDG,EAAwB,SAAC,GAAkB,IAAhBzC,EAAe,EAAfA,SAC9B0C,EAAcC,2BAD+B,EAEnB1C,mBAAyB,SAAhByC,GAFU,WAE5CT,EAF4C,KAElCC,EAFkC,OAGzBjC,mBAAS,IAHgB,WAG5CmC,EAH4C,KAGrCC,EAHqC,OAI3BpC,mBAAS,IAJkB,WAI5CsC,EAJ4C,KAItCC,EAJsC,KAKnD,OACI,kBAACV,EAAcH,SAAf,CACIC,MAAO,CACHG,KAAM,0BAAApB,EAAAC,OAAA,kEAAAD,EAAA,MACiBiC,IAAaC,QAAQ,cADtC,OACIC,EADJ,OAEFZ,EAAqB,SAATY,GAFV,6DAINd,MAAO,oBAAArB,EAAAC,OAAA,uDACHsB,GAAY,GADT,WAAAvB,EAAA,MAEGiC,IAAaG,WAAW,cAF3B,6DAIPd,WACAC,YAAa,SAAOY,GAAP,SAAAnC,EAAAC,OAAA,kEAAAD,EAAA,MACHiC,IAAaI,QAAQ,YAAaC,OAAOH,KADtC,OAETZ,EAAYY,GAFH,6DAIbV,QACAC,WACAE,OACAC,YAEHxC,IAKwB8B,EAAcD,SC3C5C,IAAMqB,EAAkB,SAAC,GAAkB,IAAhBlD,EAAe,EAAfA,SAC9B,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KAAwBA,K,uCCNvBmD,EAAeC,KAAKC,MAAMC,IAAWC,IAAI,UAAUC,OACnDC,EAAgBL,KAAKC,MAAMC,IAAWC,IAAI,UAAUG,QAIpDC,EAAaR,EAHE,IAMfS,EAJqBH,EAAgB,IAK5C,CACII,KAAM,EACNC,MAAO,GACPC,OAAQ,GACRC,MAAO,GACPC,KAAM,IAEV,CACIJ,KAAM,EACNC,MAAO,GACPC,OAAQ,GACRC,MAAO,GACPC,KAAM,ICvBHC,EAAS,CAClBC,OAAQ,CACJC,MAAO,UACPC,YAAa,YACbC,QAAS,UACTC,UAAW,UACXC,MAAO,UACPC,IAAK,UACLC,QAAS,UACTC,SAAU,WAEdC,MAAO,CACHC,OAAQ,UACRC,OAAQ,YACRC,QAAS,YACTC,WAAY,UACZC,gBAAiB,UACjBC,OAAQ,UACRC,WAAY,UACZC,SAAU,UACVC,WAAY,UACZC,UAAW,UACXC,SAAU,UACVC,OAAQ,UACRC,YAAa,UACbC,QAAS,aAEbC,KAAM,CACFd,OAAQ,UACRC,OAAQ,UACRC,QAAS,UACTC,WAAY,UACZC,gBAAiB,UACjBC,OAAQ,YACRC,WAAY,UACZC,SAAU,UACVC,WAAY,UACZC,UAAW,UACXC,SAAU,YACVC,OAAQ,UACRC,YAAa,UACbC,QAAS,c,ikBCpCjB,IAQeE,EARG,WAAO,IACb3D,EAAa4D,qBAAW/D,GAAxBG,SACR,OAAO,OACAiC,EAAOjC,EAAW,OAAS,UAC3BiC,EAAOC,S,SCuBH2B,EAzBQ,SAAAC,GAAU,IAAD,EACMF,qBAAW/D,GAArCG,EADoB,EACpBA,SAAUC,EADU,EACVA,YACZ8D,EAAWC,uBACb,SAAMN,GAAN,SAAAhF,EAAAC,OAAA,kEAAAD,EAAA,MACUuB,EAAYyD,IADtB,8DAGA,CAACzD,IAEL,OACI,kBAACgE,EAAA,EAAD,CAAMC,MAAOJ,EAAMI,OACf,kBAAC,IAAD,CACIvE,MAAOK,EACP+D,SAAUA,EACVG,MAAO,CACHC,UAAW,CACP,CACIC,MAAO,W,gBCZpBC,EAJoC,SAAAP,GAC/C,IAAMQ,EAAgBR,EAAMS,WAAa,MACzC,OAAO,kBAACN,EAAA,EAAD,OAAUH,EAAV,CAAiBI,MAAO,CAAC,CAAEI,iBAAiBR,EAAMI,WCkC9CM,EA5Ba,SAAAV,GAAU,IAAD,EACwBH,IAAjDR,EADyB,EACzBA,SAAUC,EADe,EACfA,WAAYC,EADG,EACHA,UAAWG,EADR,EACQA,YACnCiB,EAAaX,EAAMY,YAAc,UACjCC,EAAQb,EAAMR,SACdE,EACAM,EAAMc,OACNxB,EACAU,EAAMe,MAAQf,EAAMnB,MACpBU,EACAF,EACN,OACI,kBAAC,IAAD,OACQW,EADR,CAEIgB,QAAS,CAAC,CAAEL,cAAcX,EAAMgB,SAChCC,QAAS,CAAC,CAAEN,cAAcX,EAAMiB,SAChCC,QAAS,CAAC,CAAEP,cAAcX,EAAMkB,SAChCC,QAAS,CAAC,CAAER,cAAcX,EAAMmB,SAChCf,MAAO,CACH,CACIO,aACAS,SAAUpB,EAAMe,KAAO,GAAKf,EAAMqB,QAAU,GAAK,GACjDR,SAEJb,EAAMI,WCSTkB,EAAQ,WAAO,IAChBpF,EAAa4D,qBAAW/D,GAAxBG,SADe,EAEK2D,IAApBR,EAFe,EAEfA,SAAUhB,EAFK,EAELA,MACZwC,EAAQ3E,EAAWmC,EAAQgB,EACjC,OACI,kBAACc,EAAA,EAAD,CAAMC,MAAO,CAAEmB,UAAW,SAAUC,WAAY,WAC5C,kBAAC,IAAD,CAAMC,GAAI,IAAKrB,MAAO,CAAEsB,eAAgB,SACpC,kBAAC,EAAD,CAAMtB,MAAO,CAAEgB,SAAU,GAAIP,UAA7B,gBAMVc,EAAO,WACT,OACI,kBAAC,EAAD,CACIvB,MAAO,CACHzC,OAAQ,OACR6D,WAAY,aAEhB,kBAAC,EAAD,CAAgBpB,MAAO,CAAEwB,WAAY/D,EAAQC,KAAM+D,aAAc,EAAGC,cAAe,OAkBzFC,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACR3C,EAAaQ,IAAbR,SACR,OAAO,kBAAC,IAAD,CAAM4C,KAAM,qBAAsBC,KAAM,OAAQC,KAAM,GAAItB,MAAOxB,EAAU+C,QAASJ,KAGhFK,EA1EuB,SAAArC,GAAU,IACpCjB,EAAWc,IAAXd,OACR,OACI,kBAACoB,EAAA,EAAD,CAEIC,MAAO,CACHkC,SAAU,QACVC,IAAK,EACLC,OAAQ,IACR/E,MAAO,OACPE,ONlBa,GMmBb8E,cAAe5E,EAAQE,MACvB2E,gBAAiB3D,IAErB,kBAAC,EAAD,CACIqB,MAAO,CACHuC,KAAM,EACNlF,MAAOG,EN7BC,IM6B2B,OACnC2D,UAAW,SACXqB,eAAgB,gBAChBpB,WAAY,WACZqB,WAAYhF,EAAQE,MACpB+E,kBAAmBjF,EAAQG,SAE/B,kBAAC,EAAD,MACCJ,EAAa,kBAAC,EAAD,MAAW,kBAAC,EAAD,CAAUoE,SAAUhC,EAAM+C,kB,uBCdpDC,EAtBuB,SAAAhD,GAClC,OAAOiD,IAASC,OAAO,CACnBC,IACI,kBAACC,EAAA,EAAD,KACIC,sBAAuB,CAAEV,KAAM,GAC/BvC,MAAO,CACH,CACIuC,KAAM,GAEV3C,EAAMI,QAENJ,IAGZsD,QACI,kBAACC,EAAA,EAAD,CAAcnD,MAAO,CAAEuC,KAAM,IACzB,kBAACS,EAAA,EAAepD,OCCjBwD,EAjBqC,SAAAxD,GAChD,OACI,kBAACG,EAAA,EAAD,OACQH,EADR,CAEII,MAAO,CACH,CACI3C,MAAOG,ERNU,IQM2B,OAC5CgE,WAAY,OACZC,YAAa,OACbiB,kBAAmBjF,EAAQG,OAC3ByF,gBAAiB5F,EAAQK,MAE7B8B,EAAMI,WCEPkB,EARe,SAAAtB,GAC1B,OACI,kBAAC,EAAD,CAAMY,WAAY,OAAQR,MAAO,CAAC,CAAE0B,aAAcjE,EAAQC,KAAMsD,SAAU,IAAMpB,EAAMI,QACjFJ,EAAM0D,O,SCqCJC,GAtCiB,SAAA3D,GAAU,IAAD,EACyBH,IAAtDtB,EAD6B,EAC7BA,QAASe,EADoB,EACpBA,WAAYI,EADQ,EACRA,YAAaR,EADL,EACKA,gBACpC+C,EAAOjC,EAAMiC,MAAQ,QACrBE,EAAOnC,EAAMmC,MAAQ,SACrBxE,EAAwB,UAAfqC,EAAMmC,KAAmB,GAAc,WAATA,EAAoB,GAAK,GAChEf,EAA0B,UAAfpB,EAAMmC,KAAmB,GAAc,WAATA,EAAoB,GAAK,GAClExB,EAAaX,EAAMY,YAAc,UACvC,OACI,kBAAC,IAAD,OACQZ,EADR,CAEIR,SAAUQ,EAAM4D,SAAW5D,EAAMR,SACjC4C,QAASpC,EAAM4D,aAAUjK,EAAYqG,EAAMoC,QAC3CH,KAAMA,EACN4B,aAAc,CAAEhD,MAAOvB,GACvBwE,YAAa,CACT,CACInG,SACAmF,kBAAmBjF,EAAQE,MAC3B2E,gBAAiB,eAErB1C,EAAM8D,aAEVC,WAAY,CACR,CAAE3C,WAAUT,aAAYE,MAAgB,UAAToB,EAAmB,QAAUjC,EAAMa,OAASvB,GAC3EU,EAAM+D,YAEVC,mBAAoB,CAAC,CAAE5C,WAAUT,aAAYE,MAAOnB,GAAeM,EAAM+D,YACzE3D,MAAO,CACH,CAAEsC,gBAA0B,UAATT,EAAmBjC,EAAMa,OAAStC,EAAU,cAAe0F,YAAa,OAC3FjE,EAAMI,OAEV8D,cAAe,CACX,CAAExB,gBAA0B,UAATT,EAAmB/C,EAAkB,eACxDc,EAAMkE,mBCVPC,GA3BO,WAAO,IACjB5F,EAAYsB,IAAZtB,QACArC,EAAa4D,qBAAW/D,GAAxBG,SACF5C,EAAWF,IAQXgL,GAAmB,MAAR9K,OAAA,EAAAA,EAAU+K,cAAc,EACnCC,EAAoBC,EAAXrI,EAAmB,IAA+C,KACjF,OACI,kBAACiE,EAAA,EAAD,CAAMC,MAAO,CAAEuC,KAAM,EAAGnB,WAAY,SAAUoB,eAAgB,WAC1D,kBAAC4B,GAAA,EAAD,CAAOF,OAAQA,EAAQlE,MAAO,CAAE3C,MAAO2G,EAAW,IAAM,IAAKzG,OAAQyG,EAAW,IAAM,OACtF,kBAAC,GAAD,CACIjC,KAAM,QACNtB,MAAOuD,EAAW,UAAY7F,EAC9B6D,QAfI,oBAAAxH,EAAAC,OAAA,oDACRvB,EADQ,kCAAAsB,EAAA,MAEFtB,EAAS6B,QAAQ,CAAEC,OAAQ,yBAFzB,6BAIRqJ,MAAM,+BAJE,6DAgBJpI,MAAO,UACPqI,eAAgB,CAAEjH,MAAOG,EAAa,IAAM,QAC5CwC,MAAO,CAAEuE,UAAW9G,EAAQI,MAAO2G,iBAAkB/G,EAAQG,YCA9D6G,GAnBoB,SAAA7E,GAAU,IAAD,EACXF,qBAAWvG,GAAhCO,EADgC,EAChCA,QAASD,EADuB,EACvBA,QACjB,OAAKmG,EAAM8E,WAAchL,EACpBkG,EAAM8E,WAAyB,KAAZjL,EASpB,kBAACsG,EAAA,EAAD,OACQH,EADR,CAEII,MAAO,CAAC,CAAEkC,SAAU,WAAYC,IZlBf,GYkBmCwC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,GAAKjF,EAAMI,UAT1F,kBAACD,EAAA,EAAD,CAAMC,MAAO,CAAEuC,KAAM,EAAGnB,WAAY,SAAUoB,eAAgB,WAC1D,kBAAC,EAAD,CAAM/D,OAAO,EAAMuB,MAAO,CAAE8E,UAAW,WAClC,sCALwB,kBAACC,GAAD,OCY9BC,GAhBK,WAAO,IACfnG,EAAeY,IAAfZ,WACR,OACI,kBAACkB,EAAA,EAAD,CAAMC,MAAO,CAAE3C,MAAO,OAAQE,OAAQ,OAAQ+E,gBAAiBzD,IAC3D,kBAACoG,GAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAO3B,KAAM,aAActD,MAAO,CAAEO,WAAY,aAI5D,kBAAC,EAAD,Q,UClBC2E,GAAU,SAACC,GACpB,OAAO,IAAIlL,SAAOmL,SAASC,GAAK3L,QAAS2L,GAAKC,IAAKH,IC4BxCI,GA1BC,WACZ,IAAMC,EAAUC,cADE,EAEsB3L,oBAAS,GAF/B,WAEX4L,EAFW,KAEGC,EAFH,KAuBlB,MAAO,CAAED,eAAcE,WApBJ,SAAO3J,EAAeG,EAAc5C,GAApC,qBAAAgB,EAAAC,OAAA,qDACXwB,GAASG,GAAQ5C,GADN,wBAEXmM,GAAgB,GAFL,SAIDE,EAAOX,GAAQ1L,GAJd,WAAAgB,EAAA,MAKUqL,EAAKC,OAAO7J,EAAOG,EAAMnC,SAAO8L,UAAUC,WALpD,cAKDC,EALC,kBAAAzL,EAAA,MAMeyL,EAAGC,QANlB,OAMDC,EANC,OAODC,EAAOD,EAAQE,OAAO,GAAGC,KAAKF,KACpCZ,EAAQe,KAAK,SAAWH,GARjB,yBAUPT,GAAgB,GAVT,mFAoBgBa,UANjB1G,uBAAY,SAAOsG,EAAc9M,GAArB,eAAAkB,EAAAC,OAAA,oDACtB2L,IAAQ9M,EADc,uBAEhBuM,EAAOX,GAAQ5L,GAFC,kBAGfuM,EAAKY,QAAQL,IAHE,8DAK3B,MCEDM,GAAa,SAAC,GAA4B,IAA1BpD,EAAyB,EAAzBA,KAAMqD,EAAmB,EAAnBA,aAChB1H,EAAaQ,IAAbR,SACR,OACI,kBAAC,IAAD,CACI2H,WAAW,EACXtH,YAAa,QACb7D,MAAO6H,EACPqD,aAAcA,EACdE,WAAY,CACR,CACI7F,SAAU,GACVT,WAAY,UACZ8B,cAAe,EACf5B,MAAOxB,GAGK,QAAhB4D,IAASiE,GAAe,CAAEC,QAAS,QAAW,IAElDzC,eAAgB,CAAE5B,kBAAmB,GACrCsE,oBAAqB,CAAEC,kBAAmB,MAKhDC,GAAY,SAAC,GAA4B,IAA1B5D,EAAyB,EAAzBA,KAAMqD,EAAmB,EAAnBA,aACf1H,EAAaQ,IAAbR,SACR,OACI,kBAAC,IAAD,CACIkI,WAAW,EACX7H,YAAa,qBACb7D,MAAO6H,EACPqD,aAAcA,EACdE,WAAY,CACR,CACI7F,SAAU,GACVT,WAAY,UACZ6G,WAAY,KACZ/E,cAAe,EACf5B,MAAOxB,EACPoI,kBAAmB,MACnBC,UAAW,GACX/J,OAAQ,QAGI,QAAhBsF,IAASiE,GAAe,CAAEC,QAAS,QAAW,IAElDzC,eAAgB,CAAE5B,kBAAmB,EAAGH,KAAM,GAC9CyE,oBAAqB,CAAEC,kBAAmB,EAAG1J,OAAQ,QACrDyC,MAAO,CAAEuE,UAAW9G,EAAQE,MAAO4E,KAAM,MAK/CgF,GAAW,WAAO,IAAD,EACK7H,qBAAW/D,GAA3BM,EADW,EACXA,MAAOG,EADI,EACJA,KACP5C,EAAWkG,qBAAWvG,GAAtBK,OACA2E,EAAYsB,IAAZtB,QAHW,EAIkBoH,KAA7BG,EAJW,EAIXA,aAAcE,EAJH,EAIGA,WAEtB,OACI,kBAAC,EAAD,CAAU5F,MAAO,CAAE3C,MAAO,OAAQgG,gBAAiB5F,EAAQE,MAAO6E,eAAgB,aAC9E,kBAAC,GAAD,CACIX,KAAM,QACN5F,MAAO,UACPwE,MAAOtC,EACPiB,UAAWnD,IAAUG,EACrBoH,QAASkC,EACT1D,QATI,oBAAAxH,EAAAC,OAAA,kEAAAD,EAAA,MAAkBoL,EAAW3J,EAAOG,EAAM5C,IAA1C,yGAeLgO,GAxFG,WAAO,IAAD,EACuB9H,qBAAW/D,GAA9CM,EADY,EACZA,MAAOC,EADK,EACLA,SAAUE,EADL,EACKA,KAAMC,EADX,EACWA,QAC/B,OACI,kBAAC4I,GAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAASjF,MAAO,CAAEzC,OAAQ,OAAQ8E,cAAe,IAC7C,kBAAC,GAAD,CAAYiB,KAAMrH,EAAO0K,aAAczK,IACvC,kBAAC,GAAD,CAAWoH,KAAMlH,EAAMuK,aAActK,IACrC,kBAAC,GAAD,U,mBChBLoL,GAFC,kBAAM,kBAACC,GAAA,EAAD,CAAmB3F,KAAM,QAAS/B,MAAO,CAAE2H,eAAgBlK,EAAQI,UC+CnF+J,GAAO,SAAC,GAAc,IAAZtE,EAAW,EAAXA,KACJrE,EAAaQ,IAAbR,SACF4I,EAAS,CACXC,SAAU,CAAEvH,WAAY,OAAQgE,UAAW9G,EAAQG,OAAQ8D,aAAcjE,EAAQC,MACjFqK,SAAU,CAAExH,WAAY,OAAQgE,UAAW9G,EAAQE,MAAO+D,aAAcjE,EAAQC,MAChFsK,SAAU,CAAEzH,WAAY,OAAQgE,UAAW9G,EAAQE,MAAO+D,aAAcjE,EAAQC,MAChFuK,SAAU,CAAE1H,WAAY,OAAQgE,UAAW9G,EAAQC,MACnDwK,SAAU,CAAE3H,WAAY,OAAQgE,UAAW9G,EAAQC,MACnDyK,SAAU,CAAE5H,WAAY,OAAQgE,UAAW9G,EAAQC,MACnDtB,KAAM,CAAEmE,WAAY,UAAWE,MAAOxB,EAAU+B,SAAU,GAAIoG,WAAY,OAE9E,OACI,kBAAC,KAAD,CACIgB,YAAa,SAAAC,GAET,OADApP,OAAOqP,KAAKD,EAAK,WACV,GAEXrI,MAAO6H,GACNvE,IAKPiF,GAAW,kBACb,kBAACxI,EAAA,EAAD,CAAMC,MAAO,CAAEuC,KAAM,EAAGnB,WAAY,SAAUoB,eAAgB,SAAUmF,eAAgBlK,EAAQK,OAC5F,kBAAC,EAAD,CAAMW,OAAO,EAAMuB,MAAO,CAAE8E,UAAW,WAClC,oBAKE0D,GAhEI,WAAO,IACdpC,EAASqC,cAATrC,KACA9M,EAAaoG,qBAAWvG,GAAxBG,SAFa,EAGGQ,qBAHH,WAGd4O,EAHc,KAGRC,EAHQ,KAIbnC,EAAcjB,KAAdiB,UAMR,OALAjM,KAAe,oBAAAC,EAAAC,OAAA,oDACP2L,IAAQ9M,EADD,4BAEPqP,EAFO,WAAAnO,EAAA,MAEOgM,EAAUJ,EAAM9M,IAFvB,gGAIZ,CAAC8M,EAAM9M,IAEN,kBAAC2L,GAAD,CAAQP,WAAW,GACf,kBAAC,EAAD,KACI,kBAAC,EAAD,KACKgE,EACGA,EAAKE,SAAW3O,SAAO8L,UAAU8C,YAC7B,kBAAC,GAAD,MAEA,oCACI,kBAAC,EAAD,CAAOvF,KAAMoF,EAAKzM,QAClB,kBAAC8D,EAAA,EAAD,CAAMC,MAAO,CAAEzC,OAAQE,EAAQE,SAC/B,kBAAC,GAAD,CAAM2F,KAAMoF,EAAKtM,QAIzB,kBAAC,GAAD,UChCX0M,GAAU,WAAO,IAClBlN,EAAS8D,qBAAW/D,GAApBC,KAER,OADArB,IAAeqB,EAAM,IACd,kBAAC,GAAD,OAILmN,GAAa,WAAO,IAAD,EACmBjP,oBAAS,GAD5B,WACAkP,GADA,WAEbnK,EAAeY,IAAfZ,WACR,OACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUoK,SAAU,kBAAC,GAAD,OAChB,kBAAClJ,EAAA,EAAD,CAAMC,MAAO,CAAEuC,KAAM,EAAGD,gBAAiBzD,IACrC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOqK,KAAM,eACT,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAM,QACT,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAU7H,GAAI,UAElB,kBAAC,EAAD,CAAWsB,aAAc,kBAAMqG,GAAgB,UCpBpD,SAASG,KAAO,IAAD,EACJC,YAAS,CAC3B3K,MAAO4K,IACPC,QAASC,IACTC,KAAMC,MAEV,OAN0B,YAUtB,kBAAC,EAAD,KACI,kBAAC,GAAD,OAJG,kBAACC,EAAA,EAAD,Q,2DCtBfC,cAAOC,OAASzF,EAAQ,KAAUyF,S,sCCAlCC,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,uC","file":"static/js/app.05e11b06.chunk.js","sourcesContent":["import { EventType, Listener } from \"@ethersproject/abstract-provider\";\n\nconst useEthereum = () => {\n    return window.ethereum;\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ninterface RequestArguments {\n    method: string;\n    params?: unknown[] | object;\n}\n\ninterface Ethereum {\n    chainId: string;\n    isMetaMask: boolean;\n    send(payload: any, callback: any): any;\n    send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n    request(args: RequestArguments): Promise<any>;\n    on(eventName: EventType, listener: Listener);\n    off(eventName: EventType, listener: Listener);\n}\n\ndeclare global {\n    interface Window {\n        ethereum?: Ethereum;\n        web3?: {\n            currentProvider?: Ethereum;\n        };\n    }\n}\n\nexport default useEthereum;\n","import React, { useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport useEthereum from \"../hooks/useEthereum\";\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.providers.JsonRpcSigner | undefined,\n    chainId: 0,\n    address: null as string | null,\n    ensName: null as string | null\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    const ethereum = useEthereum();\n    const [chainId, setChainId] = useState<number>(1);\n    const provider = useMemo(() => {\n        return new ethers.providers.AlchemyProvider(\"kovan\", \"eRvHBkwNnm65K0KiQbNihiTyjktIGtbo\");\n    }, []);\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>();\n    const [address, setAddress] = useState<string | null>(null);\n    const [ensName, setENSName] = useState<string | null>(null);\n\n    useAsyncEffect(async () => {\n        if (ethereum) {\n            const web3 = new ethers.providers.Web3Provider(ethereum);\n            setSigner(await web3.getSigner());\n        }\n    }, [ethereum]);\n\n    useEffect(() => {\n        if (ethereum) {\n            const onAccountsChanged = async () => {\n                if (ethereum) {\n                    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n                    if (accounts?.[0]) {\n                        setAddress(accounts[0]);\n                    }\n                }\n            };\n            const onChainChanged = () => {\n                if (ethereum) {\n                    setChainId(Number(ethereum.chainId));\n                }\n            };\n            onAccountsChanged();\n            onChainChanged();\n            ethereum.on(\"accountsChanged\", onAccountsChanged);\n            ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                ethereum?.off(\"accountsChanged\", onAccountsChanged);\n                ethereum?.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [ethereum]);\n\n    useAsyncEffect(async () => {\n        if (signer && address) {\n            const ens = await signer.provider.lookupAddress(address);\n            setENSName(ens);\n        }\n    }, [signer, address]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                chainId,\n                address,\n                ensName\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n","import React, { useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    darkMode: false,\n    setDarkMode: async _darkMode => {},\n    title: \"\",\n    setTitle: (_text: string) => {},\n    body: \"\",\n    setBody: (_text: string) => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const colorScheme = useColorScheme();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [title, setTitle] = useState(\"\");\n    const [body, setBody] = useState(\"\");\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                },\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                title,\n                setTitle,\n                body,\n                setBody\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <GlobalContextProvider>\n            <EthersContextProvider>{children}</EthersContextProvider>\n        </GlobalContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <GlobalContextConsumer>\n            {globalContext => (\n                <EthersContextConsumer>\n                    {ethersContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </EthersContextConsumer>\n            )}\n        </GlobalContextConsumer>\n    );\n};\n","import { Dimensions } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const HEADER_WIDTH = 980;\nexport const DESKTOP_CONTENT_WIDTH = 980;\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const IS_DESKTOP = SCREEN_WIDTH > HEADER_WIDTH;\nexport const HEADER_HEIGHT = 64;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48\n      };\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        red: \"#FF0000\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        accent: \"#291C64\",\n        header: \"#ffffffb8\",\n        submenu: \"#ffffffb8\",\n        background: \"#f8f8f8\",\n        backgroundLight: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#1d1d1f\",\n        textMedium: \"#222222\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#b4b4b4\",\n        overlay: \"#ffffffc0\"\n    },\n    dark: {\n        accent: \"#9BECEE\",\n        header: \"#000000\",\n        submenu: \"#121212\",\n        background: \"#121212\",\n        backgroundLight: \"#1a1a1a\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#d5d1cc\",\n        textMedium: \"#cccccc\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\",\n        overlay: \"#000000c0\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","import React, { useCallback, useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst DarkModeSwitch = props => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={props.style}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.75\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default DarkModeSwitch;\n","import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    disabled?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight, placeholder } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = props.disabled\n        ? placeholder\n        : props.medium\n        ? textMedium\n        : props.note || props.light\n        ? textLight\n        : textDark;\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 13 : props.caption ? 18 : 15,\n                    color\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n","import React, { FC, useContext } from \"react\";\nimport { View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport { HEADER_HEIGHT, HEADER_WIDTH, IS_DESKTOP, Spacing } from \"../../constants/dimension\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport DarkModeSwitch from \"../DarkModeSwitch\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nexport interface WebHeaderProps {\n    onExpandMenu?: () => void;\n}\n\nconst WebHeader: FC<WebHeaderProps> = props => {\n    const { header } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                zIndex: 100,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: Spacing.small,\n                backgroundColor: header\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    width: IS_DESKTOP ? HEADER_WIDTH : \"100%\",\n                    alignSelf: \"center\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.normal\n                }}>\n                <Title />\n                {IS_DESKTOP ? <Menu /> : <MenuIcon onExpand={props.onExpandMenu} />}\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { textDark, white } = useColors();\n    const color = darkMode ? white : textDark;\n    return (\n        <View style={{ alignSelf: \"center\", alignItems: \"center\" }}>\n            <Link to={\"/\"} style={{ textDecoration: \"none\" }}>\n                <Text style={{ fontSize: 28, color }}>web3md.io</Text>\n            </Link>\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <DarkModeSwitch style={{ marginLeft: Spacing.tiny, marginRight: -8, marginBottom: -5 }} />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { textDark, textLight } = useColors();\n    const match = useRouteMatch(path);\n    const active = match?.path?.startsWith(path);\n    return (\n        <Link to={path} style={{ marginLeft: Spacing.tiny, textDecoration: \"none\" }}>\n            <Text style={{ fontFamily: \"regular\", fontSize: 18, color: active ? textDark : textLight, padding: 3 }}>\n                {title}\n            </Text>\n        </Link>\n    );\n};\n\nconst MenuIcon = ({ onExpand }) => {\n    const { textDark } = useColors();\n    return <Icon type={\"material-community\"} name={\"menu\"} size={28} color={textDark} onPress={onExpand} />;\n};\n\nexport default WebHeader;\n","import React, { FC } from \"react\";\nimport { Platform, SafeAreaView, ScrollView, ViewProps } from \"react-native\";\n\nexport type ContainerProps = ViewProps;\n\nconst Container: FC<ContainerProps> = props => {\n    return Platform.select({\n        web: (\n            <ScrollView\n                contentContainerStyle={{ flex: 1 }}\n                style={[\n                    {\n                        flex: 1\n                    },\n                    props.style\n                ]}\n                {...props}\n            />\n        ),\n        default: (\n            <SafeAreaView style={{ flex: 1 }}>\n                <ScrollView {...props} />\n            </SafeAreaView>\n        )\n    });\n};\n\nexport default Container;\n","import React from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { DESKTOP_CONTENT_WIDTH, IS_DESKTOP, Spacing } from \"../constants/dimension\";\n\nconst Content: React.FunctionComponent<ViewProps> = props => {\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    width: IS_DESKTOP ? DESKTOP_CONTENT_WIDTH : \"100%\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    paddingHorizontal: Spacing.normal,\n                    paddingVertical: Spacing.huge\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Content;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface TitleProps {\n    text: string;\n    style?: TextStyle;\n}\n\nconst Title: FC<TitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} style={[{ marginBottom: Spacing.tiny, fontSize: 40 }, props.style]}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Title;\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, textMedium, placeholder, backgroundLight } = useColors();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 36 : size === \"normal\" ? 45 : 54;\n    const fontSize = props.size === \"small\" ? 13 : size === \"normal\" ? 15 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeButton\n            {...props}\n            disabled={props.loading || props.disabled}\n            onPress={props.loading ? undefined : props.onPress}\n            type={type}\n            loadingProps={{ color: textMedium }}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: \"transparent\"\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[\n                { fontSize, fontFamily, color: type === \"solid\" ? \"white\" : props.color || textMedium },\n                props.titleStyle\n            ]}\n            disabledTitleStyle={[{ fontSize, fontFamily, color: placeholder }, props.titleStyle]}\n            style={[\n                { backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\", borderColor: \"red\" },\n                props.style\n            ]}\n            disabledStyle={[\n                { backgroundColor: type === \"solid\" ? backgroundLight : \"transparent\" },\n                props.disabledStyle\n            ]}\n        />\n    );\n};\nexport default Button;\n","import React, { useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../../constants/dimension\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport useEthereum from \"../../hooks/useEthereum\";\nimport Button from \"../Button\";\n\nconst ConnectWallet = () => {\n    const { primary } = useColors();\n    const { darkMode } = useContext(GlobalContext);\n    const ethereum = useEthereum();\n    const onPress = async () => {\n        if (ethereum) {\n            await ethereum.request({ method: \"eth_requestAccounts\" });\n        } else {\n            alert(\"No ethereum provider found.\");\n        }\n    };\n    const metaMask = ethereum?.isMetaMask || false;\n    const source = darkMode ? require(\"../../../assets/metamask-dark.png\") : require(\"../../../assets/metamask.png\");\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Image source={source} style={{ width: metaMask ? 223 : 200, height: metaMask ? 183 : 200 }} />\n            <Button\n                size={\"large\"}\n                color={metaMask ? \"#e2761b\" : primary}\n                onPress={onPress}\n                title={\"Connect\"}\n                containerStyle={{ width: IS_DESKTOP ? 440 : \"100%\" }}\n                style={{ marginTop: Spacing.large, marginHorizontal: Spacing.normal }}\n            />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React, { FC, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport Text from \"../components/Text\";\nimport ConnectToWallet from \"../components/web/ConnectToWallet\";\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\n\nexport interface ScreenProps extends ViewProps {\n    allowRead?: boolean;\n}\n\nconst WebScreen: FC<ScreenProps> = props => {\n    const { address, chainId } = useContext(EthersContext);\n    if (!props.allowRead && !address) return <ConnectToWallet />;\n    if (!props.allowRead && chainId !== 42)\n        return (\n            <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n                <Text light={true} style={{ textAlign: \"center\" }}>\n                    {\"Please switch network to\\n'Kovan'\"}\n                </Text>\n            </View>\n        );\n    return (\n        <View\n            {...props}\n            style={[{ position: \"absolute\", top: HEADER_HEIGHT, right: 0, bottom: 0, left: 0 }, props.style]}\n        />\n    );\n};\n\nexport default WebScreen;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Title from \"../components/Title\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport useColors from \"../hooks/useColors\";\nimport Screen from \"./Screen\";\n\nconst EmptyScreen = () => {\n    const { background } = useColors();\n    return (\n        <View style={{ width: \"100%\", height: \"100%\", backgroundColor: background }}>\n            <Screen>\n                <Container>\n                    <Content>\n                        <Title text={\"Loading...\"} style={{ fontFamily: \"code\" }} />\n                    </Content>\n                </Container>\n            </Screen>\n            <WebHeader />\n        </View>\n    );\n};\n\nexport default EmptyScreen;\n","import Blog from \"@web3md/contracts/deployments/kovan/Blog.json\";\nimport { ethers } from \"ethers\";\n\nexport const getBlog = (signerOrProvider: ethers.Signer | ethers.providers.Provider) => {\n    return new ethers.Contract(Blog.address, Blog.abi, signerOrProvider);\n};\n","import { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { ethers } from \"ethers\";\nimport { getBlog } from \"../constants/contracts\";\n\nconst useBlog = () => {\n    const history = useHistory();\n    const [creatingPost, setCreatingPost] = useState(false);\n    const createPost = async (title: string, body: string, signer?: ethers.Signer) => {\n        if (title && body && signer) {\n            setCreatingPost(true);\n            try {\n                const blog = getBlog(signer);\n                const tx = await blog.create(title, body, ethers.constants.HashZero);\n                const receipt = await tx.wait();\n                const hash = receipt.events[0].args.hash;\n                history.push(\"/post/\" + hash);\n            } finally {\n                setCreatingPost(false);\n            }\n        }\n    };\n    const fetchPost = useCallback(async (hash: string, provider?: ethers.providers.Provider) => {\n        if (hash && provider) {\n            const blog = getBlog(provider);\n            return blog.getPost(hash);\n        }\n    }, []);\n    return { creatingPost, createPost, fetchPost };\n};\n\nexport default useBlog;\n","import React, { useContext } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input } from \"react-native-elements\";\n\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useBlog from \"../hooks/useBlog\";\nimport useColors from \"../hooks/useColors\";\nimport Screen from \"./Screen\";\n\nconst NewScreen = () => {\n    const { title, setTitle, body, setBody } = useContext(GlobalContext);\n    return (\n        <Screen>\n            <Container>\n                <Content style={{ height: \"100%\", paddingBottom: 0 }}>\n                    <TitleInput text={title} onChangeText={setTitle} />\n                    <BodyInput text={body} onChangeText={setBody} />\n                    <Controls />\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst TitleInput = ({ text, onChangeText }) => {\n    const { textDark } = useColors();\n    return (\n        <Input\n            autoFocus={true}\n            placeholder={\"Title\"}\n            value={text}\n            onChangeText={onChangeText}\n            inputStyle={[\n                {\n                    fontSize: 40,\n                    fontFamily: \"regular\",\n                    paddingBottom: 4,\n                    color: textDark\n                },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {}\n            ]}\n            containerStyle={{ paddingHorizontal: 0 }}\n            inputContainerStyle={{ borderBottomWidth: 0 }}\n        />\n    );\n};\n\nconst BodyInput = ({ text, onChangeText }) => {\n    const { textDark } = useColors();\n    return (\n        <Input\n            multiline={true}\n            placeholder={\"Tell your story...\"}\n            value={text}\n            onChangeText={onChangeText}\n            inputStyle={[\n                {\n                    fontSize: 15,\n                    fontFamily: \"regular\",\n                    lineHeight: 27.5,\n                    paddingBottom: 4,\n                    color: textDark,\n                    textAlignVertical: \"top\",\n                    minHeight: 80,\n                    height: \"100%\"\n                },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {}\n            ]}\n            containerStyle={{ paddingHorizontal: 0, flex: 1 }}\n            inputContainerStyle={{ borderBottomWidth: 0, height: \"100%\" }}\n            style={{ marginTop: Spacing.small, flex: 1 }}\n        />\n    );\n};\n\nconst Controls = () => {\n    const { title, body } = useContext(GlobalContext);\n    const { signer } = useContext(EthersContext);\n    const { primary } = useColors();\n    const { creatingPost, createPost } = useBlog();\n    const onPress = async () => await createPost(title, body, signer);\n    return (\n        <FlexView style={{ width: \"100%\", paddingVertical: Spacing.small, justifyContent: \"flex-end\" }}>\n            <Button\n                type={\"clear\"}\n                title={\"Publish\"}\n                color={primary}\n                disabled={!title || !body}\n                loading={creatingPost}\n                onPress={onPress}\n            />\n        </FlexView>\n    );\n};\n\nexport default NewScreen;\n","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import React, { useContext, useState } from \"react\";\nimport { View } from \"react-native\";\nimport Markdown from \"react-native-markdown-display\";\nimport { useParams } from \"react-router-dom\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useBlog from \"../hooks/useBlog\";\nimport useColors from \"../hooks/useColors\";\nimport Post from \"../types/Post\";\nimport Screen from \"./Screen\";\n\nconst ViewScreen = () => {\n    const { hash } = useParams();\n    const { provider } = useContext(EthersContext);\n    const [post, setPost] = useState<Post>();\n    const { fetchPost } = useBlog();\n    useAsyncEffect(async () => {\n        if (hash && provider) {\n            setPost(await fetchPost(hash, provider));\n        }\n    }, [hash, provider]);\n    return (\n        <Screen allowRead={true}>\n            <Container>\n                <Content>\n                    {post ? (\n                        post.author === ethers.constants.AddressZero ? (\n                            <NotFound />\n                        ) : (\n                            <>\n                                <Title text={post.title} />\n                                <View style={{ height: Spacing.small }} />\n                                <Body text={post.body} />\n                            </>\n                        )\n                    ) : (\n                        <Loading />\n                    )}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Body = ({ text }) => {\n    const { textDark } = useColors();\n    const styles = {\n        heading1: { fontFamily: \"bold\", marginTop: Spacing.normal, marginBottom: Spacing.tiny },\n        heading2: { fontFamily: \"bold\", marginTop: Spacing.small, marginBottom: Spacing.tiny },\n        heading3: { fontFamily: \"bold\", marginTop: Spacing.small, marginBottom: Spacing.tiny },\n        heading4: { fontFamily: \"bold\", marginTop: Spacing.tiny },\n        heading5: { fontFamily: \"bold\", marginTop: Spacing.tiny },\n        heading6: { fontFamily: \"bold\", marginTop: Spacing.tiny },\n        body: { fontFamily: \"regular\", color: textDark, fontSize: 15, lineHeight: 27.5 }\n    };\n    return (\n        <Markdown\n            onLinkPress={url => {\n                window.open(url, \"_blank\");\n                return true;\n            }}\n            style={styles}>\n            {text}\n        </Markdown>\n    );\n};\n\nconst NotFound = () => (\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", marginVertical: Spacing.huge }}>\n        <Text light={true} style={{ textAlign: \"center\" }}>\n            {\"Post Not Found\"}\n        </Text>\n    </View>\n);\n\nexport default ViewScreen;\n","import React, { Suspense, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport EmptyScreen from \"./EmptyScreen\";\nimport NewScreen from \"./NewScreen\";\nimport ViewScreen from \"./ViewScreen\";\n\nexport const Screens = () => {\n    const { load } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    return <WebScreens />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst WebScreens = () => {\n    const [menuExpanded, setMenuExpanded] = useState(false);\n    const { background } = useColors();\n    return (\n        <Router>\n            <Suspense fallback={<EmptyScreen />}>\n                <View style={{ flex: 1, backgroundColor: background }}>\n                    <Switch>\n                        <Route path={\"/post/:hash\"}>\n                            <ViewScreen />\n                        </Route>\n                        <Route path={\"/new\"}>\n                            <NewScreen />\n                        </Route>\n                        <Redirect to={\"/new\"} />\n                    </Switch>\n                    <WebHeader onExpandMenu={() => setMenuExpanded(true)} />\n                </View>\n            </Suspense>\n        </Router>\n    );\n};\n","/* tslint:disable:ordered-imports */\nimport \"./globals\";\nimport React from \"react\";\n\nimport {\n    SourceCodePro_200ExtraLight,\n    SourceCodePro_400Regular,\n    SourceCodePro_700Bold,\n    useFonts\n} from \"@expo-google-fonts/source-code-pro\";\nimport { AppLoading } from \"expo\";\n\nimport { ContextProvider } from \"./src/context\";\nimport { Screens } from \"./src/screens\";\n\nexport default function App() {\n    const [fontsLoaded] = useFonts({\n        light: SourceCodePro_200ExtraLight,\n        regular: SourceCodePro_400Regular,\n        bold: SourceCodePro_700Bold\n    });\n    if (!fontsLoaded) {\n        return <AppLoading />;\n    }\n    return (\n        <ContextProvider>\n            <Screens />\n        </ContextProvider>\n    );\n}\n","global.Buffer = require('buffer').Buffer;\n","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";"],"sourceRoot":""}